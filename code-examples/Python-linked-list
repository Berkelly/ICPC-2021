# Work in Progress, has not been tested yet
# Node class and some functions in DoublyLinkedList class initially taken from Rosetta Code:
# http://www.rosettacode.org/wiki/Doubly-linked_list/Element_definition#Python
# Insert function initially taken from Rosetta Code:
# http://www.rosettacode.org/wiki/Doubly-linked_list/Element_insertion#Python
# Modifications made by Berkelly Gonzalez

def find(data, node):
    c = node
    while c is not None and c.data != data:
        c = c.nextN
    return c  # only returns first instance, but can call function again using c.next to continue searching #


def iter_forward(node):
    c = node
    while c is not None:
        yield c  # geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/#
        c = c.nextN


def iter_backward(node):
    c = node
    while c is not None:
        yield c  # geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/#
        c = c.prev


class Node(object):
    def __init__(self, data, prev=None, nextN=None):  # the = means that argument has a default value and including it is optional #
        # Caution! If the value of data is None it will break the find and iter functions #
        self.prev = prev
        self.nextN = nextN
        self.data = data

    def __str__(self):  # if you pass a node to print() or str(), you'll get the node data as a string #
        # ex: node.data = ICPC -> print(node) will print ICPC, str(node) will return the string 'ICPC' #
        return str(self.data)


class DoublyLinkedList(object):
    def __init__(self, head=None):
        # Caution! initializing a new list using a node from another list will break the old list #
        self.head = head
        self.tail = head  # Any list that isn't empty should always have both a tail and a head #
        self.length = 0

        if self.head is not None:
            self.length += 1
            self.head.prev = None
            self.head.nextN = None

    def insert_after(self, newNode, node):  # Caution! doesn't allow inserting into an empty list #
        newNode.nextN = node.nextN
        newNode.prev = node

        if node is self.tail:
            self.tail = newNode
        else:
            node.nextN.prev = newNode

        node.nextN = newNode
        self.length += 1
        return newNode  # returns the node that was inserted #

    def insert_before(self, newNode, node):  # Caution! doesn't allow inserting into an empty list #
        newNode.nextN = node
        newNode.prev = node.prev

        if node is self.head:
            self.head = newNode
        else:
            node.prev.nextN = newNode

        node.prev = newNode
        self.length += 1
        return newNode  # returns the node that was inserted #

    def insert_head(self, newNode):  # can be used to insert into an empty list #
        if self.head is None:
            newNode.nextN = None
            self.tail = newNode
        else:
            self.head.prev = newNode
            newNode.nextN = self.head

        newNode.prev = None
        self.head = newNode
        self.length += 1

    def insert_tail(self, newNode):  # can be used to insert into an empty list #
        if self.tail is None:
            newNode.prev = None
            self.head = newNode
        else:
            self.tail.nextN = newNode
            newNode.prev = self.tail

        newNode.next = None
        self.tail = newNode
        self.length += 1

    def delete_node(self, node):
        if node is self.tail:
            self.tail = node.prev
        else:
            node.nextN.prev = node.prev

        if node is self.head:
            self.head = node.nextN
        else:
            node.prev.nextN = node.nextN

        c = node.nextN
        node.nextN = None
        node.prev = None
        self.length -= 1
        return c  # returns node after the one that was deleted, or none if tail was deleted #

    def delete_list(self, node1, node2=None):  # not inclusive, won't delete node2, will delete tail if node2 is not specified #
        c = node1
        while c is not None and c is not node2:
            d = c
            c = c.nextN
            self.delete_node(d)
        return c  # Will return either None or node2 when finished #
